user vega vega;
worker_processes  4;
worker_cpu_affinity 0001 0010 0100 1000;

pid        /usr/local/openresty/nginx/logs/nginx.pid;

events {
    use epoll;
    #worker_connections  4096;
    worker_connections  65535;
}

http {
    #resolver 114.114.114.114; # replace it with your favorite config
    resolver 127.0.0.1;
    charset UTF-8;
    include /var/workspace/agw/conf/mime.types;

    log_format  main '$remote_addr - $remote_user [$time_local] "$request" '
    '$status $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for"';
    access_log  ./logs/access.log  main;
    error_log ./logs/error.log error;

    sendfile        on;
    tcp_nopush      on;
    tcp_nodelay     on;
    keepalive_timeout  65;
    server_tokens   off;
#---------------------------------------------------------
    send_timeout 60;
    proxy_read_timeout 75;
    proxy_send_timeout 60;
    proxy_connect_timeout 3;
    proxy_max_temp_file_size 1m;

    client_header_buffer_size 4k;
    large_client_header_buffers 8 16k;
    client_max_body_size 1024m;

    port_in_redirect off;

    open_log_file_cache max=65535 inactive=60s min_uses=2 valid=15m;

    #----------------------------agw configuration-----------------------------
    lua_package_path '/var/workspace/agw/?.lua;/usr/local/lor/?.lua;/usr/local/luarocks/share/lua/5.1/?.lua;;';
    lua_package_cpath "/usr/local/luarocks/lib/lua/5.1/?.so;;";
    #lua_code_cache off;

    #共享变量
    #保存的是项目的配置文件
    lua_shared_dict agw_config 1m;

    lua_shared_dict mutex 1m;
    lua_shared_dict locks 10m;
    #保存的是负载的配置文件
    lua_shared_dict config 50m;
    lua_shared_dict load   50m;
    lua_shared_dict state  50m;
    
    lua_max_running_timers 512;
    lua_max_pending_timers 1024;

    init_by_lua_block {
        local config_file = "/var/workspace/agw/agw.conf"
        local agw = require("agw.agw")
        local config, store = agw.init({
            config = config_file
        })

        -- the agw context
        context = {
            agw = agw,
            store = store,
            config = config
        }
    }
    
    init_worker_by_lua_block {
        local agw = context.agw
        agw.init_worker(context.config)
    }

    upstream backend {
        server 0.0.0.1; # just an invalid address as a place holder
        balancer_by_lua_file /var/workspace/agw/agw/plugins/balancer/balancer.lua;
        keepalive 20;
    }
    upstream backend2 {
      server 127.0.0.1:8001 weight=5;
      server 127.0.0.1:8002 weight=5;
    }

    # main server
    server {
        listen       80;

        set $x_error_code "-";
        proxy_next_upstream_tries 2;
        proxy_next_upstream_timeout 5s;
        proxy_next_upstream error timeout http_502;

        proxy_read_timeout 60s;

        location = /favicon.ico {
            log_not_found off;
            access_log off;
        }
        
        location /doc {
            root /var/workspace/php_api/public;
            index index.php index.html index.htm;
            auth_basic "secret";
            auth_basic_user_file /usr/local/openresty/nginx/conf/passwd.db;
        }

        location / {
            access_by_lua_block {
                local agw = context.agw
                agw.access()
            }
            proxy_pass  http://backend2;
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        location /robots.txt {
            return 200 'User-agent: *\nDisallow: /';
        }

        error_page 502 /custom_502;
        location = /custom_502 {
            content_by_lua_block {
                ngx.say("check your route host or check your codes 0_0! ");
            }
            internal;
        }
    }

    # default upstream server
    server {
        listen 8001;
        root /var/workspace/php_api/public;
        index index.php index.html index.htm;

	    location ~ \.php {  
            fastcgi_pass unix:/tmp/php/php-fpm.sock;
            fastcgi_index /index.php;
            fastcgi_split_path_info  ^(.+\.php)(/.+)$;
            fastcgi_param PATH_INFO  $fastcgi_path_info; 
            fastcgi_param PATH_TRANSLATED $document_root$fastcgi_path_info;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            include /usr/local/openresty/nginx/conf/fastcgi.conf;
        }
        location / {
            try_files $uri $uri/ /index.php?$query_string;
        }

        location ~ /\.ht {  
            deny all;
        }
    }

    server {
        listen 8002;
        root /var/workspace/php_api/public;
        index index.php index.html index.htm;
        
        location ~ \.php {  
            fastcgi_pass unix:/tmp/php/php-fpm2.sock;
            fastcgi_index /index.php;
            fastcgi_split_path_info  ^(.+\.php)(/.+)$;
            fastcgi_param PATH_INFO  $fastcgi_path_info; 
            fastcgi_param PATH_TRANSLATED $document_root$fastcgi_path_info;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            include /usr/local/openresty/nginx/conf/fastcgi.conf;
        }
        
        location / {
            try_files $uri $uri/ /index.php?$query_string;
        }
        
        location ~ /\.ht {  
            deny all;  
        }
    }


    # agw dashboard server
    server {
        listen       9999;
        #server_name  localhost;
        access_log ./logs/dashboard_access.log main;
        error_log ./logs/dashboard_error.log info;

        location = /favicon.ico {
            log_not_found off;
            access_log off;
        }

        location /robots.txt {
            return 200 'User-agent: *\nDisallow: /';
        }

        # dashboard的静态文件 
        location ~* /agw/static/(.*) {
            alias /var/workspace/agw/dashboard/static/$1;
        }

        location / {
            set $template_root '';
            content_by_lua_block {
                require("dashboard.main")(context.config, context.store)
            }
        }
    }

    #include conf.d/*.conf;
}
